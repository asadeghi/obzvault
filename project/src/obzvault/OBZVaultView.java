/*
 * Copyright (c) 2009 OFFBYZERO PTY. LTD.
 */
package obzvault;

import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.EventObject;
import javax.swing.JFrame;
import java.awt.Font;
import java.util.prefs.*;

/**
 * The application's main frame.
 */
public class OBZVaultView extends FrameView {

    private JFileChooser _jfcSave;
    private JFileChooser _jfcOpen;
    private String _strFnOpenInitial;
    private ConfirmExit _ce;
    private String _strAppName;
    private Preferences _prefs;

    public OBZVaultView(SingleFrameApplication app, String[] args) {
        super(app);
        initComponents();

        if (args.length > 0) {
            _strFnOpenInitial = args[0];
        } else {
            _strFnOpenInitial = null;
        }

        if (obzVaultDocument.getTrialStatus() * 2 > 13005) {
            _strAppName = new String(new byte[]{0x4f, 0x42, 0x5a, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x54, 0x72, 0x69, 0x61, 0x6c});
        } else {
            _strAppName = new String(new byte[]{0x4f, 0x42, 0x5a, 0x56, 0x61, 0x75, 0x6c, 0x74});
        }

        getFrame().setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        getFrame().setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("resources/app.png")));

        _jfcSave = new JFileChooser();
        _jfcSave.setFileSelectionMode(JFileChooser.SAVE_DIALOG & JFileChooser.FILES_ONLY);
        _jfcSave.setAcceptAllFileFilterUsed(false);
        _jfcSave.setDialogTitle("Save");
        _jfcSave.addChoosableFileFilter(new VaultFileFilter());

        _jfcOpen = new JFileChooser();
        _jfcOpen.setFileSelectionMode(JFileChooser.OPEN_DIALOG & JFileChooser.FILES_ONLY);
        _jfcOpen.setAcceptAllFileFilterUsed(true);
        _jfcOpen.setDialogTitle("Open");
        _jfcOpen.addChoosableFileFilter(new VaultFileFilter());

        lblTrial.setVisible(obzVaultDocument.getTrialStatus() * 2 > 13005);

        configureUIEvents();
        configureMenus();
        tweakPlatformUI();

        // Set the font for the Text area
        _prefs = Preferences.userNodeForPackage(this.getClass());
        String strDefFont = _prefs.get("OBZVaultViewFont", null);
        if (strDefFont == null)
            strDefFont = "Courier";
        docTextArea.setFont(Font.decode(strDefFont));

        ResourceMap rm = org.jdesktop.application.Application.getInstance(obzvault.OBZVaultApp.class).getContext().getResourceMap(OBZVaultView.class);
        obzVaultDocument.setAppVersion(rm.getString("Application.version"));
        obzVaultDocument.reset();
    }

    @Action
    public void showAboutBox() {
        OBZVaultAboutBox ab = new OBZVaultAboutBox(getFrame());
        ab.setModal(true);
        ab.setLocationRelativeTo(getFrame());
        ab.setVisible(true);
    }

    private void configureUIEvents() {
        _ce = new ConfirmExit();
        getApplication().addExitListener(_ce);
        docTextArea.getDocument().addUndoableEditListener(new UndoableEditListener() {

            public void undoableEditHappened(UndoableEditEvent e) {
                undoManager.undoableEditHappened(e);
            }
        });
        getFrame().addWindowListener(new WindowAdapter() {

            public void windowOpened(WindowEvent we) {
                if (_strFnOpenInitial != null) {
                    try {
                        doOpen(_strFnOpenInitial);
                    } catch (Exception e) {
                        e.printStackTrace();
                        showError("The file " + _strFnOpenInitial + " could not be opened.");
                    }
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        docScrollPane = new javax.swing.JScrollPane();
        docTextArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        sepFile1 = new javax.swing.JSeparator();
        saveMenuItem = new javax.swing.JMenuItem();
        saveasMenuItem = new javax.swing.JMenuItem();
        sepFile2 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        findMenuItem = new javax.swing.JMenuItem();
        findnextMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        selectallMenuItem = new javax.swing.JMenuItem();
        formatMenu = new javax.swing.JMenu();
        wordwrapMenuItem = new javax.swing.JCheckBoxMenuItem();
        fontMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        lblClean = new javax.swing.JLabel();
        lblDirty = new javax.swing.JLabel();
        lblTrial = new javax.swing.JLabel();
        obzVaultDocument = new obzvault.OBZVaultDocument();
        undoManager = new javax.swing.undo.UndoManager();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        docScrollPane.setName("docScrollPane"); // NOI18N

        docTextArea.setColumns(20);
        docTextArea.setFont(docTextArea.getFont());
        docTextArea.setLineWrap(true);
        docTextArea.setRows(5);
        docTextArea.setName("docTextArea"); // NOI18N
        docTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                docTextAreaCaretUpdate(evt);
            }
        });
        docTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                docTextAreaKeyReleased(evt);
            }
        });
        docScrollPane.setViewportView(docTextArea);

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(docScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(docScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(obzvault.OBZVaultApp.class).getContext().getResourceMap(OBZVaultView.class);
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setToolTipText(resourceMap.getString("fileMenu.toolTipText")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(obzvault.OBZVaultApp.class).getContext().getActionMap(OBZVaultView.class, this);
        newMenuItem.setAction(actionMap.get("newDocument")); // NOI18N
        newMenuItem.setText(resourceMap.getString("newMenuItem.text")); // NOI18N
        newMenuItem.setName("newMenuItem"); // NOI18N
        newMenuItem.setToolTipText(null);
        fileMenu.add(newMenuItem);

        openMenuItem.setAction(actionMap.get("open")); // NOI18N
        openMenuItem.setText(resourceMap.getString("openMenuItem.text")); // NOI18N
        openMenuItem.setName("openMenuItem"); // NOI18N
        openMenuItem.setToolTipText(null);
        fileMenu.add(openMenuItem);

        sepFile1.setName("sepFile1"); // NOI18N
        fileMenu.add(sepFile1);

        saveMenuItem.setAction(actionMap.get("save")); // NOI18N
        saveMenuItem.setText(resourceMap.getString("saveMenuItem.text")); // NOI18N
        saveMenuItem.setName("saveMenuItem"); // NOI18N
        saveMenuItem.setToolTipText(null);
        fileMenu.add(saveMenuItem);

        saveasMenuItem.setAction(actionMap.get("saveAs")); // NOI18N
        saveasMenuItem.setText(resourceMap.getString("saveasMenuItem.text")); // NOI18N
        saveasMenuItem.setName("saveasMenuItem"); // NOI18N
        saveasMenuItem.setToolTipText(null);
        fileMenu.add(saveasMenuItem);

        sepFile2.setName("sepFile2"); // NOI18N
        fileMenu.add(sepFile2);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.setToolTipText(null);
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText(resourceMap.getString("editMenu.text")); // NOI18N
        editMenu.setName("editMenu"); // NOI18N

        undoMenuItem.setAction(actionMap.get("undo")); // NOI18N
        undoMenuItem.setText(resourceMap.getString("undoMenuItem.text")); // NOI18N
        undoMenuItem.setToolTipText(resourceMap.getString("undoMenuItem.toolTipText")); // NOI18N
        undoMenuItem.setName("undoMenuItem"); // NOI18N
        undoMenuItem.setToolTipText(null);
        editMenu.add(undoMenuItem);

        redoMenuItem.setAction(actionMap.get("redo")); // NOI18N
        redoMenuItem.setText(resourceMap.getString("redoMenuItem.text")); // NOI18N
        redoMenuItem.setToolTipText(resourceMap.getString("redoMenuItem.toolTipText")); // NOI18N
        redoMenuItem.setName("redoMenuItem"); // NOI18N
        redoMenuItem.setToolTipText(null);
        editMenu.add(redoMenuItem);

        jSeparator2.setName("jSeparator2"); // NOI18N
        editMenu.add(jSeparator2);

        cutMenuItem.setAction(actionMap.get("cut")); // NOI18N
        cutMenuItem.setText(resourceMap.getString("cutMenuItem.text")); // NOI18N
        cutMenuItem.setToolTipText(resourceMap.getString("cutMenuItem.toolTipText")); // NOI18N
        cutMenuItem.setName("cutMenuItem"); // NOI18N
        cutMenuItem.setToolTipText(null);
        editMenu.add(cutMenuItem);

        copyMenuItem.setAction(actionMap.get("copy")); // NOI18N
        copyMenuItem.setText(resourceMap.getString("copyMenuItem.text")); // NOI18N
        copyMenuItem.setToolTipText(resourceMap.getString("copyMenuItem.toolTipText")); // NOI18N
        copyMenuItem.setName("copyMenuItem"); // NOI18N
        copyMenuItem.setToolTipText(null);
        editMenu.add(copyMenuItem);

        pasteMenuItem.setAction(actionMap.get("paste")); // NOI18N
        pasteMenuItem.setText(resourceMap.getString("pasteMenuItem.text")); // NOI18N
        pasteMenuItem.setToolTipText(resourceMap.getString("pasteMenuItem.toolTipText")); // NOI18N
        pasteMenuItem.setName("pasteMenuItem"); // NOI18N
        pasteMenuItem.setToolTipText(null);
        editMenu.add(pasteMenuItem);

        jSeparator3.setName("jSeparator3"); // NOI18N
        editMenu.add(jSeparator3);

        findMenuItem.setAction(actionMap.get("find")); // NOI18N
        findMenuItem.setText(resourceMap.getString("findMenuItem.text")); // NOI18N
        findMenuItem.setToolTipText(resourceMap.getString("findMenuItem.toolTipText")); // NOI18N
        findMenuItem.setName("findMenuItem"); // NOI18N
        findMenuItem.setToolTipText(null);
        editMenu.add(findMenuItem);

        findnextMenuItem.setAction(actionMap.get("findNext")); // NOI18N
        findnextMenuItem.setText(resourceMap.getString("findnextMenuItem.text")); // NOI18N
        findnextMenuItem.setToolTipText(resourceMap.getString("findnextMenuItem.toolTipText")); // NOI18N
        findnextMenuItem.setName("findnextMenuItem"); // NOI18N
        findnextMenuItem.setToolTipText(null);
        editMenu.add(findnextMenuItem);

        jSeparator4.setName("jSeparator4"); // NOI18N
        editMenu.add(jSeparator4);

        selectallMenuItem.setAction(actionMap.get("selectAll")); // NOI18N
        selectallMenuItem.setText(resourceMap.getString("selectallMenuItem.text")); // NOI18N
        selectallMenuItem.setToolTipText(resourceMap.getString("selectallMenuItem.toolTipText")); // NOI18N
        selectallMenuItem.setName("selectallMenuItem"); // NOI18N
        selectallMenuItem.setToolTipText(null);
        editMenu.add(selectallMenuItem);

        menuBar.add(editMenu);

        formatMenu.setText(resourceMap.getString("formatMenu.text")); // NOI18N
        formatMenu.setName("formatMenu"); // NOI18N

        wordwrapMenuItem.setAction(actionMap.get("setWordWrap")); // NOI18N
        wordwrapMenuItem.setSelected(true);
        wordwrapMenuItem.setText(resourceMap.getString("wordwrapMenuItem.text")); // NOI18N
        wordwrapMenuItem.setName("wordwrapMenuItem"); // NOI18N
        wordwrapMenuItem.setToolTipText(null);
        formatMenu.add(wordwrapMenuItem);

        fontMenuItem.setAction(actionMap.get("fontSelection")); // NOI18N
        fontMenuItem.setText(resourceMap.getString("fontMenuItem.text")); // NOI18N
        fontMenuItem.setName("fontMenuItem"); // NOI18N
        formatMenu.add(fontMenuItem);

        menuBar.add(formatMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N
        statusPanel.setPreferredSize(new java.awt.Dimension(537, 22));
        statusPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblClean.setIcon(resourceMap.getIcon("lblClean.icon")); // NOI18N
        lblClean.setText(resourceMap.getString("lblClean.text")); // NOI18N
        lblClean.setName("lblClean"); // NOI18N
        statusPanel.add(lblClean, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 3, -1, -1));

        lblDirty.setIcon(resourceMap.getIcon("lblDirty.icon")); // NOI18N
        lblDirty.setText(resourceMap.getString("lblDirty.text")); // NOI18N
        lblDirty.setName("lblDirty"); // NOI18N
        statusPanel.add(lblDirty, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 3, -1, -1));

        lblTrial.setFont(resourceMap.getFont("lblTrial.font")); // NOI18N
        lblTrial.setText(resourceMap.getString("lblTrial.text")); // NOI18N
        lblTrial.setName("lblTrial"); // NOI18N
        statusPanel.add(lblTrial, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 3, -1, -1));

        obzVaultDocument.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                obzVaultDocumentPropertyChange(evt);
            }
        });

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void obzVaultDocumentPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_obzVaultDocumentPropertyChange
        if (OBZVaultDocument.PROP_TEXT.equals(evt.getPropertyName())) {
            docTextArea.setText((String) evt.getNewValue());
        }
        if (OBZVaultDocument.PROP_ISDIRTY.equals(evt.getPropertyName())) {
            updateStatus();
        }
        if (OBZVaultDocument.PROP_TITLE.equals(evt.getPropertyName())) {
            updateTitle((String) evt.getNewValue());
        }
    }//GEN-LAST:event_obzVaultDocumentPropertyChange

    private void docTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_docTextAreaKeyReleased
        obzVaultDocument.setText(docTextArea.getText());
    }//GEN-LAST:event_docTextAreaKeyReleased

    private void docTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_docTextAreaCaretUpdate
        updateStatus();
    }//GEN-LAST:event_docTextAreaCaretUpdate

    private void updateTitle(String strDocTitle) {
        getFrame().setTitle(strDocTitle + " - " + _strAppName);
    }

    private void updateStatus() {
        Boolean fIsDirty = obzVaultDocument.getIsDirty();
        String strSelected;
        Boolean fSelectedText;

        lblClean.setEnabled(!fIsDirty);
        lblClean.setVisible(!fIsDirty);

        lblDirty.setEnabled(fIsDirty);
        lblDirty.setVisible(fIsDirty);

        strSelected = docTextArea.getSelectedText() == null ? "" : docTextArea.getSelectedText();
        fSelectedText = strSelected.length() > 0;
        copyMenuItem.setEnabled(fSelectedText);
        cutMenuItem.setEnabled(fSelectedText);

        undoMenuItem.setEnabled(undoManager.canUndo());
        redoMenuItem.setEnabled(undoManager.canRedo());

        if (System.getProperty("os.name").contains("Mac OS X")) {
            getRootPane().putClientProperty("Window.documentModified", fIsDirty);
        }
    }

    @Action
    public void setWordWrap() {
        this.docTextArea.setLineWrap(this.wordwrapMenuItem.getState());
    }

    @Action
    public void undo() {
        if (undoManager.canUndo()) {
            undoManager.undo();
        }
    }

    @Action
    public void redo() {
        if (undoManager.canRedo()) {
            undoManager.redo();
        }
    }

    @Action
    public void cut() {
        docTextArea.cut();
        obzVaultDocument.setText(docTextArea.getText());
    }

    @Action
    public void copy() {
        docTextArea.copy();
    }

    @Action
    public void paste() {
        docTextArea.paste();
        obzVaultDocument.setText(docTextArea.getText());
    }

    @Action
    public void selectAll() {
        docTextArea.selectAll();
    }

    @Action
    public Boolean save() {
        Boolean fSaved = false;

        if (obzVaultDocument.getTrialStatus() * 2 > 13005 && docTextArea.getText().length() > 128) {
            showError("You are using a Trial version of OBZVault, which is limited to small files.\nPlease purchase a full version of OBZVault to save this file.");
        } else if (obzVaultDocument.getIsSaved()) {
            fSaved = doSave();
        } else {
            fSaved = doSaveAs();
        }

        return fSaved;
    }

    @Action
    public void open() {
        doOpen(null);
    }

    @Action
    public void find() {
        OBZVaultFindDialog fd = new OBZVaultFindDialog(getFrame(), true);
        fd.setLocationRelativeTo(getFrame());
        fd.setTitle("Find");
        OBZVaultApp.getApplication().show(fd);
        String strSnippet = fd.getStringToFind();

        if (strSnippet != null) {
            int iPos = obzVaultDocument.find(strSnippet, false);
            if (iPos >= 0) {
                docTextArea.select(iPos, iPos + strSnippet.length());
            } else {
                showError("'" + strSnippet + "' could not be found.");
            }
        }
    }

    @Action
    public void findNext() {
        int iPos = obzVaultDocument.findNext(docTextArea.getCaretPosition());
        if (iPos >= 0) {
            docTextArea.select(iPos, iPos + obzVaultDocument.getLastFind().length());
        } else {
            showError("No more instances of '" + obzVaultDocument.getLastFind() + "' could be found.");
        }

    }

    @Action
    public void fontSelection() {
        OBZVaultFontDialog fd;

        fd = new OBZVaultFontDialog(getFrame(), true, docTextArea.getFont());
        fd.setLocationRelativeTo(getFrame());
        OBZVaultApp.getApplication().show(fd);
        docTextArea.setFont(fd.getSelectedFont());

        // Save the selected font in preferences
        _prefs.put("OBZVaultViewFont", fd.getSelectedFontString());
    }

    @Action
    public void newDocument() {
        Boolean fAbort = false;

        if (obzVaultDocument.getIsDirty()) {
            fAbort = !letUserSaveChanges();
        }

        if (!fAbort) {
            undoManager.discardAllEdits();
            obzVaultDocument.reset();
        }
    }

    @Action
    public Boolean saveAs() {
        boolean fSaved = false;
        if (obzVaultDocument.getTrialStatus() * 2 > 13005 && docTextArea.getText().length() > 128) {
            showError("You are using a Trial version of OBZVault, which is limited to small files.\nPlease purchase a full version of OBZVault to save this file.");
        } else {
            fSaved = doSaveAs();
        }
        return fSaved;
    }

    @Action
    public void doExit() {
        getFrame().setVisible(false);
    }

    private void configureMenus() {
        // Fix spastic Netbeans accelerators.
        exitMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        openMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        newMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        saveMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        undoMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        redoMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        cutMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        copyMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        pasteMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        findMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        selectallMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        findnextMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0));

        // Manually set mnemonics because NetBeans periodically nukes them for no reason.
        fileMenu.setMnemonic('f');
        newMenuItem.setMnemonic('n');
        openMenuItem.setMnemonic('o');
        saveMenuItem.setMnemonic('s');
        saveasMenuItem.setMnemonic('a');
        exitMenuItem.setMnemonic('x');
        editMenu.setMnemonic('e');
        undoMenuItem.setMnemonic('u');
        redoMenuItem.setMnemonic('r');
        cutMenuItem.setMnemonic('t');
        copyMenuItem.setMnemonic('c');
        pasteMenuItem.setMnemonic('p');
        findMenuItem.setMnemonic('f');
        findnextMenuItem.setMnemonic('n');
        selectallMenuItem.setMnemonic('a');
        formatMenu.setMnemonic('o');
        wordwrapMenuItem.setMnemonic('w');
        fontMenuItem.setMnemonic('f');
        helpMenu.setMnemonic('h');
        aboutMenuItem.setMnemonic('a');

        aboutMenuItem.setText("About " + _strAppName + "...");
    }

    private void tweakPlatformUI() {

        if (System.getProperty("os.name").contains("Mac OS X")) {
            // Handle Mac OS X specific code; note "Mac OS X" so we don't match "Mac OS 9" or similar.

            exitMenuItem.setVisible(false);
            helpMenu.setVisible(false);
            sepFile2.setVisible(false);

            findnextMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));

            com.apple.eawt.Application.getApplication().addApplicationListener(new com.apple.eawt.ApplicationAdapter() {

                public void handleAbout(com.apple.eawt.ApplicationEvent e) {
                    showAboutBox();
                    e.setHandled(true);
                }

                public void handleOpenFile(com.apple.eawt.ApplicationEvent e) {
                    open();
                }

                public void handleQuit(com.apple.eawt.ApplicationEvent e) {
                    _ce.setIgnore(true);

                    // Use a new temporary ce, because _ce is set to ignore.  Aargh.
                    ConfirmExit ceT = new ConfirmExit();
                    if (ceT.canExit(null)) {
                        Application.getInstance().exit();
                    } else {
                        e.setHandled(false);
                    }
                    _ce.setIgnore(false);
                }
            });
        }

    }

    private Boolean doSave() {
        return obzVaultDocument.saveVaultDoc();
    }

    private Boolean doSaveAs() {
        boolean fSaved = false;
        char[] rgchpw = null;

        if (_jfcSave.showSaveDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {

            File file = _jfcSave.getSelectedFile();
            if (!file.getName().endsWith(".vault")) {
                file = new File(file.getPath() + ".vault");
            }

            OBZVaultNewPassDialog npd = new OBZVaultNewPassDialog(getFrame(), true);
            npd.setLocationRelativeTo(getFrame());
            npd.setTitle("Create Password");
            npd.setVisible(true);
            rgchpw = npd.getPassword();

            if (rgchpw != null) {
                Boolean fAbort = false;

                if (file.exists()) {
                    fAbort = !allowOverwrite();
                }

                if (!fAbort) {
                    if (obzVaultDocument.saveAsVaultDoc(file, rgchpw)) {
                        fSaved = true;

                    } else {
                        showError("The file could not be saved.");
                    }
                }

                // Clear the password array
                for (int ichpw = 0; ichpw < rgchpw.length; ichpw++) {
                    rgchpw[ichpw] = 0;
                }
            }
        }

        return fSaved;
    }

    private Boolean letUserSaveChanges() {
        Boolean fAllowDestruction = true;
        int iResponse = JOptionPane.showConfirmDialog(
                getRootPane(),
                "Save changes first?", "Unsaved Changes",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        if (iResponse == JOptionPane.YES_OPTION) {
            fAllowDestruction = save();
        }

        return fAllowDestruction;
    }

    private Boolean allowOverwrite() {
        int iResponse = JOptionPane.showConfirmDialog(
                getRootPane(),
                "Overwrite existing file?", "File Exists",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        return (iResponse == JOptionPane.YES_OPTION);
    }

    private void doOpen(String strfn) {
        File file = null;

        if (!obzVaultDocument.getIsDirty() || letUserSaveChanges()) {

            if (strfn != null) {
                file = new File(strfn);
            } else {
                if (_jfcOpen.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
                    file = _jfcOpen.getSelectedFile();
                }
            }

            if (file != null) {

                if (file.exists()) {

                    Boolean fOpened = false;
                    if (OBZVaultFile.isOBZVaultFile(file)) {
                        fOpened = openVaultDoc(file);
                    } else {
                        fOpened = openTextDoc(file);
                    }

                    if (fOpened) {
                        // openVaultDoc succeeded
                        docTextArea.setCaretPosition(0);
                        undoManager.discardAllEdits();
                    }
                } else {
                    showError("The file " + file + " does not exist.");
                }
            }
        }
        updateStatus();
    }

    private Boolean openTextDoc(File file) {
        return obzVaultDocument.openTextDoc(file);
    }

    private Boolean openVaultDoc(File file) {
        Boolean fResult = false;
        char[] rgchpw = null;

        OBZVaultEnterPassDialog epd = new OBZVaultEnterPassDialog(getFrame(), true);
        epd.setLocationRelativeTo(getFrame());
        epd.setTitle("Enter Password");
        epd.setVisible(true);
        rgchpw = epd.getPassword();

        if (rgchpw != null) {
            if (obzVaultDocument.getTrialStatus() * 2 > 13005 && OBZVaultFile.getEncryptedDocLength(file) > 128) {
                showError("You are using a Trial version of OBZVault, which is limited to small files.\nPlease purchase a full version of OBZVault to open this file.");
            } else if (!obzVaultDocument.openVaultDoc(file, rgchpw)) {
                showError("The file could not be opened.");
            } else {
                fResult = true;
            }

            for (int ichpw = 0; ichpw < rgchpw.length; ichpw++) {
                rgchpw[ichpw] = 0;
            }
        }

        return fResult;
    }

    private void showError(String strMsg) {
        JOptionPane.showMessageDialog(
                mainPanel,
                strMsg,
                "OBZVault",
                JOptionPane.ERROR_MESSAGE);
    }

// <editor-fold defaultstate="collapsed" desc="Variables declaration - do not modify">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JScrollPane docScrollPane;
    private javax.swing.JTextArea docTextArea;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem findMenuItem;
    private javax.swing.JMenuItem findnextMenuItem;
    private javax.swing.JMenuItem fontMenuItem;
    private javax.swing.JMenu formatMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lblClean;
    private javax.swing.JLabel lblDirty;
    private javax.swing.JLabel lblTrial;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private obzvault.OBZVaultDocument obzVaultDocument;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem saveasMenuItem;
    private javax.swing.JMenuItem selectallMenuItem;
    private javax.swing.JSeparator sepFile1;
    private javax.swing.JSeparator sepFile2;
    private javax.swing.JPanel statusPanel;
    private javax.swing.undo.UndoManager undoManager;
    private javax.swing.JMenuItem undoMenuItem;
    private javax.swing.JCheckBoxMenuItem wordwrapMenuItem;
    // End of variables declaration//GEN-END:variables

    private class ConfirmExit implements Application.ExitListener {

        private Boolean _fIgnore;

        public ConfirmExit() {
            _fIgnore = false;
        }

        public void setIgnore(Boolean value) {
            _fIgnore = value;
        }

        public boolean canExit(EventObject e) {

            Boolean fExit = true;

            if (!_fIgnore && obzVaultDocument.getIsDirty()) {
                fExit = letUserSaveChanges();
            }

            return fExit;
        }

        public void willExit(EventObject e) {
        }
    }
}

